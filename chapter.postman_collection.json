{
	"info": {
		"_postman_id": "148aec12-b17a-460b-a6ce-47604a96a9ad",
		"name": "FYP - Chapter",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth0",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Retrieve Auth0 user by name",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjVTeE1NY3NYcndIcGRydVB1MVlXUyJ9.eyJpc3MiOiJodHRwczovL2Rldi0xc3B6aDlvMS5ldS5hdXRoMC5jb20vIiwic3ViIjoiV3lpSmNtdWs4QmJkZUJYVEY0bHFxQ3NMS1BSWFN2N3ZAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vZGV2LTFzcHpoOW8xLmV1LmF1dGgwLmNvbS9hcGkvdjIvIiwiaWF0IjoxNjEwODkxNDk4LCJleHAiOjE2MTA5Nzc4OTgsImF6cCI6Ild5aUpjbXVrOEJiZGVCWFRGNGxxcUNzTEtQUlhTdjd2Iiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDp1c2VycyB1cGRhdGU6dXNlcnMgZGVsZXRlOnVzZXJzIGNyZWF0ZTp1c2VycyByZWFkOnVzZXJzX2FwcF9tZXRhZGF0YSB1cGRhdGU6dXNlcnNfYXBwX21ldGFkYXRhIGRlbGV0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSByZWFkOnVzZXJfY3VzdG9tX2Jsb2NrcyBjcmVhdGU6dXNlcl9jdXN0b21fYmxvY2tzIGRlbGV0ZTp1c2VyX2N1c3RvbV9ibG9ja3MgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmhvb2tzIHVwZGF0ZTpob29rcyBkZWxldGU6aG9va3MgY3JlYXRlOmhvb2tzIHJlYWQ6YWN0aW9ucyB1cGRhdGU6YWN0aW9ucyBkZWxldGU6YWN0aW9ucyBjcmVhdGU6YWN0aW9ucyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOmxvZ3NfdXNlcnMgcmVhZDpzaGllbGRzIGNyZWF0ZTpzaGllbGRzIHVwZGF0ZTpzaGllbGRzIGRlbGV0ZTpzaGllbGRzIHJlYWQ6YW5vbWFseV9ibG9ja3MgZGVsZXRlOmFub21hbHlfYmxvY2tzIHVwZGF0ZTp0cmlnZ2VycyByZWFkOnRyaWdnZXJzIHJlYWQ6Z3JhbnRzIGRlbGV0ZTpncmFudHMgcmVhZDpndWFyZGlhbl9mYWN0b3JzIHVwZGF0ZTpndWFyZGlhbl9mYWN0b3JzIHJlYWQ6Z3VhcmRpYW5fZW5yb2xsbWVudHMgZGVsZXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRzIGNyZWF0ZTpndWFyZGlhbl9lbnJvbGxtZW50X3RpY2tldHMgcmVhZDp1c2VyX2lkcF90b2tlbnMgY3JlYXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgZGVsZXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgcmVhZDpjdXN0b21fZG9tYWlucyBkZWxldGU6Y3VzdG9tX2RvbWFpbnMgY3JlYXRlOmN1c3RvbV9kb21haW5zIHVwZGF0ZTpjdXN0b21fZG9tYWlucyByZWFkOmVtYWlsX3RlbXBsYXRlcyBjcmVhdGU6ZW1haWxfdGVtcGxhdGVzIHVwZGF0ZTplbWFpbF90ZW1wbGF0ZXMgcmVhZDptZmFfcG9saWNpZXMgdXBkYXRlOm1mYV9wb2xpY2llcyByZWFkOnJvbGVzIGNyZWF0ZTpyb2xlcyBkZWxldGU6cm9sZXMgdXBkYXRlOnJvbGVzIHJlYWQ6cHJvbXB0cyB1cGRhdGU6cHJvbXB0cyByZWFkOmJyYW5kaW5nIHVwZGF0ZTpicmFuZGluZyBkZWxldGU6YnJhbmRpbmcgcmVhZDpsb2dfc3RyZWFtcyBjcmVhdGU6bG9nX3N0cmVhbXMgZGVsZXRlOmxvZ19zdHJlYW1zIHVwZGF0ZTpsb2dfc3RyZWFtcyBjcmVhdGU6c2lnbmluZ19rZXlzIHJlYWQ6c2lnbmluZ19rZXlzIHVwZGF0ZTpzaWduaW5nX2tleXMgcmVhZDpsaW1pdHMgdXBkYXRlOmxpbWl0cyBjcmVhdGU6cm9sZV9tZW1iZXJzIHJlYWQ6cm9sZV9tZW1iZXJzIGRlbGV0ZTpyb2xlX21lbWJlcnMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kB5RmshG-rfs-46fZ-NE1RXxnkmOarmxJbjhMH3Anov8E0tSvzviYHbAgLpVPdatR6DqaB5jkP7IEr-3vwiDwusxXmmxCGPsCCzui9S_X3Sga1z6GIKFAyHAR7-FDXilyl49vNSqVRboWlnK1CL_KyzCno0KFpfvS28mQmPLk_axbQF0nNY37GGsbHxzBPlGpIXRBsmfjOfA8zqv8_ZSxOLZ2WwBLt_z5zLwn9Qo8qkbQ96Uzb1hg8O2DThkaZv3y3WksDrHChIOKoe03_Mz8hTYcVQOO89vH-lfWDklbPHZX-9RNUGUMeHuePHKAbGYOlwO_w2AKIFDD1fxEk-jaA",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://dev-1spzh9o1.eu.auth0.com/api/v2/users?q=name:*Kev*",
									"protocol": "https",
									"host": [
										"dev-1spzh9o1",
										"eu",
										"auth0",
										"com"
									],
									"path": [
										"api",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "q",
											"value": "name:*Kev*"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Auth0 user by email",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjVTeE1NY3NYcndIcGRydVB1MVlXUyJ9.eyJpc3MiOiJodHRwczovL2Rldi0xc3B6aDlvMS5ldS5hdXRoMC5jb20vIiwic3ViIjoiV3lpSmNtdWs4QmJkZUJYVEY0bHFxQ3NMS1BSWFN2N3ZAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vZGV2LTFzcHpoOW8xLmV1LmF1dGgwLmNvbS9hcGkvdjIvIiwiaWF0IjoxNjEwODkxNDk4LCJleHAiOjE2MTA5Nzc4OTgsImF6cCI6Ild5aUpjbXVrOEJiZGVCWFRGNGxxcUNzTEtQUlhTdjd2Iiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDp1c2VycyB1cGRhdGU6dXNlcnMgZGVsZXRlOnVzZXJzIGNyZWF0ZTp1c2VycyByZWFkOnVzZXJzX2FwcF9tZXRhZGF0YSB1cGRhdGU6dXNlcnNfYXBwX21ldGFkYXRhIGRlbGV0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSByZWFkOnVzZXJfY3VzdG9tX2Jsb2NrcyBjcmVhdGU6dXNlcl9jdXN0b21fYmxvY2tzIGRlbGV0ZTp1c2VyX2N1c3RvbV9ibG9ja3MgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmhvb2tzIHVwZGF0ZTpob29rcyBkZWxldGU6aG9va3MgY3JlYXRlOmhvb2tzIHJlYWQ6YWN0aW9ucyB1cGRhdGU6YWN0aW9ucyBkZWxldGU6YWN0aW9ucyBjcmVhdGU6YWN0aW9ucyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOmxvZ3NfdXNlcnMgcmVhZDpzaGllbGRzIGNyZWF0ZTpzaGllbGRzIHVwZGF0ZTpzaGllbGRzIGRlbGV0ZTpzaGllbGRzIHJlYWQ6YW5vbWFseV9ibG9ja3MgZGVsZXRlOmFub21hbHlfYmxvY2tzIHVwZGF0ZTp0cmlnZ2VycyByZWFkOnRyaWdnZXJzIHJlYWQ6Z3JhbnRzIGRlbGV0ZTpncmFudHMgcmVhZDpndWFyZGlhbl9mYWN0b3JzIHVwZGF0ZTpndWFyZGlhbl9mYWN0b3JzIHJlYWQ6Z3VhcmRpYW5fZW5yb2xsbWVudHMgZGVsZXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRzIGNyZWF0ZTpndWFyZGlhbl9lbnJvbGxtZW50X3RpY2tldHMgcmVhZDp1c2VyX2lkcF90b2tlbnMgY3JlYXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgZGVsZXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgcmVhZDpjdXN0b21fZG9tYWlucyBkZWxldGU6Y3VzdG9tX2RvbWFpbnMgY3JlYXRlOmN1c3RvbV9kb21haW5zIHVwZGF0ZTpjdXN0b21fZG9tYWlucyByZWFkOmVtYWlsX3RlbXBsYXRlcyBjcmVhdGU6ZW1haWxfdGVtcGxhdGVzIHVwZGF0ZTplbWFpbF90ZW1wbGF0ZXMgcmVhZDptZmFfcG9saWNpZXMgdXBkYXRlOm1mYV9wb2xpY2llcyByZWFkOnJvbGVzIGNyZWF0ZTpyb2xlcyBkZWxldGU6cm9sZXMgdXBkYXRlOnJvbGVzIHJlYWQ6cHJvbXB0cyB1cGRhdGU6cHJvbXB0cyByZWFkOmJyYW5kaW5nIHVwZGF0ZTpicmFuZGluZyBkZWxldGU6YnJhbmRpbmcgcmVhZDpsb2dfc3RyZWFtcyBjcmVhdGU6bG9nX3N0cmVhbXMgZGVsZXRlOmxvZ19zdHJlYW1zIHVwZGF0ZTpsb2dfc3RyZWFtcyBjcmVhdGU6c2lnbmluZ19rZXlzIHJlYWQ6c2lnbmluZ19rZXlzIHVwZGF0ZTpzaWduaW5nX2tleXMgcmVhZDpsaW1pdHMgdXBkYXRlOmxpbWl0cyBjcmVhdGU6cm9sZV9tZW1iZXJzIHJlYWQ6cm9sZV9tZW1iZXJzIGRlbGV0ZTpyb2xlX21lbWJlcnMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kB5RmshG-rfs-46fZ-NE1RXxnkmOarmxJbjhMH3Anov8E0tSvzviYHbAgLpVPdatR6DqaB5jkP7IEr-3vwiDwusxXmmxCGPsCCzui9S_X3Sga1z6GIKFAyHAR7-FDXilyl49vNSqVRboWlnK1CL_KyzCno0KFpfvS28mQmPLk_axbQF0nNY37GGsbHxzBPlGpIXRBsmfjOfA8zqv8_ZSxOLZ2WwBLt_z5zLwn9Qo8qkbQ96Uzb1hg8O2DThkaZv3y3WksDrHChIOKoe03_Mz8hTYcVQOO89vH-lfWDklbPHZX-9RNUGUMeHuePHKAbGYOlwO_w2AKIFDD1fxEk-jaA",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://dev-1spzh9o1.eu.auth0.com/api/v2/users-by-email?email=mallon-k12@ulster.ac.uk",
									"protocol": "https",
									"host": [
										"dev-1spzh9o1",
										"eu",
										"auth0",
										"com"
									],
									"path": [
										"api",
										"v2",
										"users-by-email"
									],
									"query": [
										{
											"key": "email",
											"value": "mallon-k12@ulster.ac.uk"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve Auth0 user by ID",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"type": "text",
										"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjVTeE1NY3NYcndIcGRydVB1MVlXUyJ9.eyJpc3MiOiJodHRwczovL2Rldi0xc3B6aDlvMS5ldS5hdXRoMC5jb20vIiwic3ViIjoiV3lpSmNtdWs4QmJkZUJYVEY0bHFxQ3NMS1BSWFN2N3ZAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vZGV2LTFzcHpoOW8xLmV1LmF1dGgwLmNvbS9hcGkvdjIvIiwiaWF0IjoxNjEwODkxNDk4LCJleHAiOjE2MTA5Nzc4OTgsImF6cCI6Ild5aUpjbXVrOEJiZGVCWFRGNGxxcUNzTEtQUlhTdjd2Iiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDp1c2VycyB1cGRhdGU6dXNlcnMgZGVsZXRlOnVzZXJzIGNyZWF0ZTp1c2VycyByZWFkOnVzZXJzX2FwcF9tZXRhZGF0YSB1cGRhdGU6dXNlcnNfYXBwX21ldGFkYXRhIGRlbGV0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSByZWFkOnVzZXJfY3VzdG9tX2Jsb2NrcyBjcmVhdGU6dXNlcl9jdXN0b21fYmxvY2tzIGRlbGV0ZTp1c2VyX2N1c3RvbV9ibG9ja3MgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmhvb2tzIHVwZGF0ZTpob29rcyBkZWxldGU6aG9va3MgY3JlYXRlOmhvb2tzIHJlYWQ6YWN0aW9ucyB1cGRhdGU6YWN0aW9ucyBkZWxldGU6YWN0aW9ucyBjcmVhdGU6YWN0aW9ucyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOmxvZ3NfdXNlcnMgcmVhZDpzaGllbGRzIGNyZWF0ZTpzaGllbGRzIHVwZGF0ZTpzaGllbGRzIGRlbGV0ZTpzaGllbGRzIHJlYWQ6YW5vbWFseV9ibG9ja3MgZGVsZXRlOmFub21hbHlfYmxvY2tzIHVwZGF0ZTp0cmlnZ2VycyByZWFkOnRyaWdnZXJzIHJlYWQ6Z3JhbnRzIGRlbGV0ZTpncmFudHMgcmVhZDpndWFyZGlhbl9mYWN0b3JzIHVwZGF0ZTpndWFyZGlhbl9mYWN0b3JzIHJlYWQ6Z3VhcmRpYW5fZW5yb2xsbWVudHMgZGVsZXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRzIGNyZWF0ZTpndWFyZGlhbl9lbnJvbGxtZW50X3RpY2tldHMgcmVhZDp1c2VyX2lkcF90b2tlbnMgY3JlYXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgZGVsZXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgcmVhZDpjdXN0b21fZG9tYWlucyBkZWxldGU6Y3VzdG9tX2RvbWFpbnMgY3JlYXRlOmN1c3RvbV9kb21haW5zIHVwZGF0ZTpjdXN0b21fZG9tYWlucyByZWFkOmVtYWlsX3RlbXBsYXRlcyBjcmVhdGU6ZW1haWxfdGVtcGxhdGVzIHVwZGF0ZTplbWFpbF90ZW1wbGF0ZXMgcmVhZDptZmFfcG9saWNpZXMgdXBkYXRlOm1mYV9wb2xpY2llcyByZWFkOnJvbGVzIGNyZWF0ZTpyb2xlcyBkZWxldGU6cm9sZXMgdXBkYXRlOnJvbGVzIHJlYWQ6cHJvbXB0cyB1cGRhdGU6cHJvbXB0cyByZWFkOmJyYW5kaW5nIHVwZGF0ZTpicmFuZGluZyBkZWxldGU6YnJhbmRpbmcgcmVhZDpsb2dfc3RyZWFtcyBjcmVhdGU6bG9nX3N0cmVhbXMgZGVsZXRlOmxvZ19zdHJlYW1zIHVwZGF0ZTpsb2dfc3RyZWFtcyBjcmVhdGU6c2lnbmluZ19rZXlzIHJlYWQ6c2lnbmluZ19rZXlzIHVwZGF0ZTpzaWduaW5nX2tleXMgcmVhZDpsaW1pdHMgdXBkYXRlOmxpbWl0cyBjcmVhdGU6cm9sZV9tZW1iZXJzIHJlYWQ6cm9sZV9tZW1iZXJzIGRlbGV0ZTpyb2xlX21lbWJlcnMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kB5RmshG-rfs-46fZ-NE1RXxnkmOarmxJbjhMH3Anov8E0tSvzviYHbAgLpVPdatR6DqaB5jkP7IEr-3vwiDwusxXmmxCGPsCCzui9S_X3Sga1z6GIKFAyHAR7-FDXilyl49vNSqVRboWlnK1CL_KyzCno0KFpfvS28mQmPLk_axbQF0nNY37GGsbHxzBPlGpIXRBsmfjOfA8zqv8_ZSxOLZ2WwBLt_z5zLwn9Qo8qkbQ96Uzb1hg8O2DThkaZv3y3WksDrHChIOKoe03_Mz8hTYcVQOO89vH-lfWDklbPHZX-9RNUGUMeHuePHKAbGYOlwO_w2AKIFDD1fxEk-jaA",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://dev-1spzh9o1.eu.auth0.com/api/v2/users/google-oauth2|116246763698305472989",
									"protocol": "https",
									"host": [
										"dev-1spzh9o1",
										"eu",
										"auth0",
										"com"
									],
									"path": [
										"api",
										"v2",
										"users",
										"google-oauth2|116246763698305472989"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sort Auth0 search results",
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6IjVTeE1NY3NYcndIcGRydVB1MVlXUyJ9.eyJpc3MiOiJodHRwczovL2Rldi0xc3B6aDlvMS5ldS5hdXRoMC5jb20vIiwic3ViIjoiV3lpSmNtdWs4QmJkZUJYVEY0bHFxQ3NMS1BSWFN2N3ZAY2xpZW50cyIsImF1ZCI6Imh0dHBzOi8vZGV2LTFzcHpoOW8xLmV1LmF1dGgwLmNvbS9hcGkvdjIvIiwiaWF0IjoxNjEwODkxNDk4LCJleHAiOjE2MTA5Nzc4OTgsImF6cCI6Ild5aUpjbXVrOEJiZGVCWFRGNGxxcUNzTEtQUlhTdjd2Iiwic2NvcGUiOiJyZWFkOmNsaWVudF9ncmFudHMgY3JlYXRlOmNsaWVudF9ncmFudHMgZGVsZXRlOmNsaWVudF9ncmFudHMgdXBkYXRlOmNsaWVudF9ncmFudHMgcmVhZDp1c2VycyB1cGRhdGU6dXNlcnMgZGVsZXRlOnVzZXJzIGNyZWF0ZTp1c2VycyByZWFkOnVzZXJzX2FwcF9tZXRhZGF0YSB1cGRhdGU6dXNlcnNfYXBwX21ldGFkYXRhIGRlbGV0ZTp1c2Vyc19hcHBfbWV0YWRhdGEgY3JlYXRlOnVzZXJzX2FwcF9tZXRhZGF0YSByZWFkOnVzZXJfY3VzdG9tX2Jsb2NrcyBjcmVhdGU6dXNlcl9jdXN0b21fYmxvY2tzIGRlbGV0ZTp1c2VyX2N1c3RvbV9ibG9ja3MgY3JlYXRlOnVzZXJfdGlja2V0cyByZWFkOmNsaWVudHMgdXBkYXRlOmNsaWVudHMgZGVsZXRlOmNsaWVudHMgY3JlYXRlOmNsaWVudHMgcmVhZDpjbGllbnRfa2V5cyB1cGRhdGU6Y2xpZW50X2tleXMgZGVsZXRlOmNsaWVudF9rZXlzIGNyZWF0ZTpjbGllbnRfa2V5cyByZWFkOmNvbm5lY3Rpb25zIHVwZGF0ZTpjb25uZWN0aW9ucyBkZWxldGU6Y29ubmVjdGlvbnMgY3JlYXRlOmNvbm5lY3Rpb25zIHJlYWQ6cmVzb3VyY2Vfc2VydmVycyB1cGRhdGU6cmVzb3VyY2Vfc2VydmVycyBkZWxldGU6cmVzb3VyY2Vfc2VydmVycyBjcmVhdGU6cmVzb3VyY2Vfc2VydmVycyByZWFkOmRldmljZV9jcmVkZW50aWFscyB1cGRhdGU6ZGV2aWNlX2NyZWRlbnRpYWxzIGRlbGV0ZTpkZXZpY2VfY3JlZGVudGlhbHMgY3JlYXRlOmRldmljZV9jcmVkZW50aWFscyByZWFkOnJ1bGVzIHVwZGF0ZTpydWxlcyBkZWxldGU6cnVsZXMgY3JlYXRlOnJ1bGVzIHJlYWQ6cnVsZXNfY29uZmlncyB1cGRhdGU6cnVsZXNfY29uZmlncyBkZWxldGU6cnVsZXNfY29uZmlncyByZWFkOmhvb2tzIHVwZGF0ZTpob29rcyBkZWxldGU6aG9va3MgY3JlYXRlOmhvb2tzIHJlYWQ6YWN0aW9ucyB1cGRhdGU6YWN0aW9ucyBkZWxldGU6YWN0aW9ucyBjcmVhdGU6YWN0aW9ucyByZWFkOmVtYWlsX3Byb3ZpZGVyIHVwZGF0ZTplbWFpbF9wcm92aWRlciBkZWxldGU6ZW1haWxfcHJvdmlkZXIgY3JlYXRlOmVtYWlsX3Byb3ZpZGVyIGJsYWNrbGlzdDp0b2tlbnMgcmVhZDpzdGF0cyByZWFkOnRlbmFudF9zZXR0aW5ncyB1cGRhdGU6dGVuYW50X3NldHRpbmdzIHJlYWQ6bG9ncyByZWFkOmxvZ3NfdXNlcnMgcmVhZDpzaGllbGRzIGNyZWF0ZTpzaGllbGRzIHVwZGF0ZTpzaGllbGRzIGRlbGV0ZTpzaGllbGRzIHJlYWQ6YW5vbWFseV9ibG9ja3MgZGVsZXRlOmFub21hbHlfYmxvY2tzIHVwZGF0ZTp0cmlnZ2VycyByZWFkOnRyaWdnZXJzIHJlYWQ6Z3JhbnRzIGRlbGV0ZTpncmFudHMgcmVhZDpndWFyZGlhbl9mYWN0b3JzIHVwZGF0ZTpndWFyZGlhbl9mYWN0b3JzIHJlYWQ6Z3VhcmRpYW5fZW5yb2xsbWVudHMgZGVsZXRlOmd1YXJkaWFuX2Vucm9sbG1lbnRzIGNyZWF0ZTpndWFyZGlhbl9lbnJvbGxtZW50X3RpY2tldHMgcmVhZDp1c2VyX2lkcF90b2tlbnMgY3JlYXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgZGVsZXRlOnBhc3N3b3Jkc19jaGVja2luZ19qb2IgcmVhZDpjdXN0b21fZG9tYWlucyBkZWxldGU6Y3VzdG9tX2RvbWFpbnMgY3JlYXRlOmN1c3RvbV9kb21haW5zIHVwZGF0ZTpjdXN0b21fZG9tYWlucyByZWFkOmVtYWlsX3RlbXBsYXRlcyBjcmVhdGU6ZW1haWxfdGVtcGxhdGVzIHVwZGF0ZTplbWFpbF90ZW1wbGF0ZXMgcmVhZDptZmFfcG9saWNpZXMgdXBkYXRlOm1mYV9wb2xpY2llcyByZWFkOnJvbGVzIGNyZWF0ZTpyb2xlcyBkZWxldGU6cm9sZXMgdXBkYXRlOnJvbGVzIHJlYWQ6cHJvbXB0cyB1cGRhdGU6cHJvbXB0cyByZWFkOmJyYW5kaW5nIHVwZGF0ZTpicmFuZGluZyBkZWxldGU6YnJhbmRpbmcgcmVhZDpsb2dfc3RyZWFtcyBjcmVhdGU6bG9nX3N0cmVhbXMgZGVsZXRlOmxvZ19zdHJlYW1zIHVwZGF0ZTpsb2dfc3RyZWFtcyBjcmVhdGU6c2lnbmluZ19rZXlzIHJlYWQ6c2lnbmluZ19rZXlzIHVwZGF0ZTpzaWduaW5nX2tleXMgcmVhZDpsaW1pdHMgdXBkYXRlOmxpbWl0cyBjcmVhdGU6cm9sZV9tZW1iZXJzIHJlYWQ6cm9sZV9tZW1iZXJzIGRlbGV0ZTpyb2xlX21lbWJlcnMiLCJndHkiOiJjbGllbnQtY3JlZGVudGlhbHMifQ.kB5RmshG-rfs-46fZ-NE1RXxnkmOarmxJbjhMH3Anov8E0tSvzviYHbAgLpVPdatR6DqaB5jkP7IEr-3vwiDwusxXmmxCGPsCCzui9S_X3Sga1z6GIKFAyHAR7-FDXilyl49vNSqVRboWlnK1CL_KyzCno0KFpfvS28mQmPLk_axbQF0nNY37GGsbHxzBPlGpIXRBsmfjOfA8zqv8_ZSxOLZ2WwBLt_z5zLwn9Qo8qkbQ96Uzb1hg8O2DThkaZv3y3WksDrHChIOKoe03_Mz8hTYcVQOO89vH-lfWDklbPHZX-9RNUGUMeHuePHKAbGYOlwO_w2AKIFDD1fxEk-jaA",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://dev-1spzh9o1.eu.auth0.com/api/v2/users?q=name:*Mallon*&sort=logins_count:-1",
									"protocol": "https",
									"host": [
										"dev-1spzh9o1",
										"eu",
										"auth0",
										"com"
									],
									"path": [
										"api",
										"v2",
										"users"
									],
									"query": [
										{
											"key": "q",
											"value": "name:*Mallon*"
										},
										{
											"key": "sort",
											"value": "logins_count:-1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Retrieve reviews by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/10/reviews",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"10",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific review by ID",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/reviews/2",
									"host": [
										"{{url}}"
									],
									"path": [
										"reviews",
										"2"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all reviews for book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/books/0312999526/reviews",
									"host": [
										"{{url}}"
									],
									"path": [
										"books",
										"0312999526",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"response = pm.response.json()\r",
											"pm.environment.set(\"new_review_url\", response.url);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "43",
											"type": "text",
											"disabled": true
										},
										{
											"key": "reviewer_id",
											"value": "9",
											"type": "text"
										},
										{
											"key": "book_id",
											"value": "32",
											"type": "text"
										},
										{
											"key": "rating",
											"value": "4.5",
											"type": "text"
										},
										{
											"key": "text",
											"value": "Amazing",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1.0/books/0486296954/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1.0",
										"books",
										"0486296954",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Successfully edited review\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "reviewer_id",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "book_id",
											"value": "29",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rating",
											"value": "5",
											"type": "text"
										},
										{
											"key": "text",
											"value": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi eget maximus lacus, fringilla imperdiet lacus. Integer imperdiet convallis tellus eget maximus. Pellentesque congue non quam ac iaculis. Praesent vitae ullamcorper purus, in malesuada tellus. Nulla a massa porttitor, iaculis arcu ac, commodo ante. Quisque tempus imperdiet consequat. Donec neque neque, finibus id hendrerit a, lacinia sed ipsum. Suspendisse sollicitudin, velit elementum ultrices efficitur, sem sapien pulvinar nisi, bibendum lobortis arcu quam sit amet leo. Morbi tincidunt et mauris vehicula rhoncus.",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1.0/reviews/6",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1.0",
										"reviews",
										"6"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "http://localhost:5000/api/v1.0/reviews/2",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1.0",
										"reviews",
										"2"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get all reviews for book (Invalid book ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid book ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/books/invalid_isbn/reviews",
									"host": [
										"{{url}}"
									],
									"path": [
										"books",
										"invalid_isbn",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieve reviews by user ID (Invalid user ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid user ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/9999/reviews",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"9999",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get specific review by ID (Invalid review ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid review ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/reviews/404",
									"host": [
										"{{url}}"
									],
									"path": [
										"reviews",
										"404"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add new review (Missing form data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing form data\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "10",
											"type": "text"
										},
										{
											"key": "reviewer_id",
											"value": "1",
											"type": "text"
										},
										{
											"key": "book_id",
											"value": "29",
											"type": "text"
										},
										{
											"key": "rating",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "text",
											"value": "I don't get it",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1.0/books/0755379926/reviews",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1.0",
										"books",
										"0755379926",
										"reviews"
									]
								}
							},
							"response": []
						},
						{
							"name": "Edit review (Missing form data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing form data\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "reviewer_id",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "book_id",
											"value": "29",
											"type": "text",
											"disabled": true
										},
										{
											"key": "rating",
											"value": "5",
											"type": "text",
											"disabled": true
										},
										{
											"key": "text",
											"value": "Loved it",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "http://localhost:5000/api/v1.0/reviews/144",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1.0",
										"reviews",
										"144"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete review (Invalid review ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid review ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "http://localhost:5000/api/v1.0/reviews/999",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "5000",
									"path": [
										"api",
										"v1.0",
										"reviews",
										"999"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Get user_id by auth0 ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/auth0/{{auth0_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth0",
										"{{auth0_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user details by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/{{user_id}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's 'following' status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/10/followedby/9",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"10",
										"followedby",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get followers for specific user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/10/followers",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"10",
										"followers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get followed users for specific user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/9/followed",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"9",
										"followed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search users by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/searchusers/Kev",
									"host": [
										"{{url}}"
									],
									"path": [
										"searchusers",
										"Kev"
									]
								}
							},
							"response": []
						},
						{
							"name": "Follow user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Followed user\");\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/user/15/follow/9",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"15",
										"follow",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unfollow user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/user/15/unfollow/9",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"15",
										"unfollow",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user details to DB",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"User added to DB\");\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "auth0_id",
											"value": "",
											"type": "text"
										},
										{
											"key": "name",
											"value": "name",
											"type": "text"
										},
										{
											"key": "nickname",
											"value": "nickname",
											"type": "text"
										},
										{
											"key": "email",
											"value": "e@mail.com",
											"type": "text"
										},
										{
											"key": "image",
											"value": "image.png",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/userprofiletodb/",
									"host": [
										"{{url}}"
									],
									"path": [
										"userprofiletodb",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get user_id by auth0 ID (Invalid ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/auth0/invalid_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"auth0",
										"invalid_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user details by ID (Invalid ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/invalid_id",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"invalid_id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search users by name (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No results for this query\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/searchusers/invalid",
									"host": [
										"{{url}}"
									],
									"path": [
										"searchusers",
										"invalid"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user's 'following' status (Invalid relationship)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/10/followedby/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"10",
										"followedby",
										"10"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get followers for specific user (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This user has 0 followers\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/9999/followers",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"9999",
										"followers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get followed users for specific user (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"This user does not follow anyone\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/99/followed",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"99",
										"followed"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add user details to DB (Invalid - Existing user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"User already exists in DB\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "auth0_id",
											"value": "{{auth0_id}}",
											"type": "text"
										},
										{
											"key": "name",
											"value": "name",
											"type": "text"
										},
										{
											"key": "nickname",
											"value": "nickname",
											"type": "text"
										},
										{
											"key": "email",
											"value": "email",
											"type": "text"
										},
										{
											"key": "image",
											"value": "image.png",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/userprofiletodb/",
									"host": [
										"{{url}}"
									],
									"path": [
										"userprofiletodb",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Unfollow user (Invalid relationship)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Relationship does not exist\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/user/9/unfollow/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"9",
										"unfollow",
										"1"
									]
								}
							},
							"response": []
						},
						{
							"name": "Follow user (Invalid user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid user\");\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/user/2222/follow/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"2222",
										"follow",
										"1"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Message",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Get all messages between two users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{url}}/messages/?userA=9&userB=1",
									"host": [
										"{{url}}"
									],
									"path": [
										"messages",
										""
									],
									"query": [
										{
											"key": "userA",
											"value": "9"
										},
										{
											"key": "userB",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all received messages by user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/{{user_id}}/messages/received",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{user_id}}",
										"messages",
										"received"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all sent messages by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/10/messages/sent",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"10",
										"messages",
										"sent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all messages by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/9/messages/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"9",
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all chat participants",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/9/messages/participants",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"9",
										"messages",
										"participants"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send message to user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Message sent successfully\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi",
											"type": "text"
										},
										{
											"key": "sender_id",
											"value": "9",
											"type": "text"
										},
										{
											"key": "recipient_id",
											"value": "1",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2021-Jan-18 21:40:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/5/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"5",
										"contact"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get all received messages by user_id (Invalid user_id)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No messages found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{url}}/user/999/messages/received",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"999",
										"messages",
										"received"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all sent messages by user ID (Invalid user ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid user ID\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{url}}/user/999/messages/sent",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"999",
										"messages",
										"sent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all sent messages by user ID (Invalid - No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No messages found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{url}}/user/2/messages/sent",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"2",
										"messages",
										"sent"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send message to user (Missing form data)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing form data\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text"
										},
										{
											"key": "recipient_id",
											"value": "999",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/{{user_id}}/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{user_id}}",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send message to user (Invalid user ID)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid user ID\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text"
										},
										{
											"key": "recipient_id",
											"value": "999",
											"type": "text"
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/404/contact",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"404",
										"contact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all messages between two users (Invalid - No messages)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No messages found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": []
								},
								"url": {
									"raw": "{{url}}/messages?userA=999&userB=10",
									"host": [
										"{{url}}"
									],
									"path": [
										"messages"
									],
									"query": [
										{
											"key": "userA",
											"value": "999"
										},
										{
											"key": "userB",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all messages by user ID (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No messages found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/2/messages/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"2",
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all messages by user ID (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid user ID\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/234/messages/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"234",
										"messages",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all chat participants (No chats found)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No chats found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "msg_text",
											"value": "Hi. This is an example message",
											"type": "text",
											"disabled": true
										},
										{
											"key": "sender_id",
											"value": "10",
											"type": "text",
											"disabled": true
										},
										{
											"key": "recipient_id",
											"value": "{{user_id}}",
											"type": "text",
											"disabled": true
										},
										{
											"key": "time_sent",
											"value": "2020-Oct-18 21:31:12",
											"type": "text",
											"disabled": true
										}
									]
								},
								"url": {
									"raw": "{{url}}/user/999/messages/participants",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"999",
										"messages",
										"participants"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Activity",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Get activity by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activity/9",
									"host": [
										"{{url}}"
									],
									"path": [
										"activity",
										"9"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get activity for all followed users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"}); "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activity/followedby/10",
									"host": [
										"{{url}}"
									],
									"path": [
										"activity",
										"followedby",
										"10"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get activity by user ID (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No activities found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activity/222",
									"host": [
										"{{url}}"
									],
									"path": [
										"activity",
										"222"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get activity for all followed users (Invalid user)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"}); \r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No activities found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/activity/followedby/404",
									"host": [
										"{{url}}"
									],
									"path": [
										"activity",
										"followedby",
										"404"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Book",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Get book",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/books/{{ISBN}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"books",
										"{{ISBN}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "{{url}}/addbooktodb",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "title",
											"value": "Nemesis",
											"type": "text"
										},
										{
											"key": "isbn",
											"value": "0451200187",
											"type": "text"
										},
										{
											"key": "author",
											"value": "Agatha Christie",
											"type": "text"
										},
										{
											"key": "page_count",
											"value": "213",
											"type": "text"
										},
										{
											"key": "image_link",
											"value": "http://books.google.com/books/content?id=aZa-QgAACAAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api",
											"type": "text"
										},
										{
											"key": "publish_date",
											"value": "2000",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{url}}/addbooktodb",
									"host": [
										"{{url}}"
									],
									"path": [
										"addbooktodb"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get book (Invalid ISBN)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No result found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/books/1234",
									"host": [
										"{{url}}"
									],
									"path": [
										"books",
										"1234"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Achievement",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Get achievements for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/10/achievements",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"10",
										"achievements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get all achievements",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/achievements",
									"host": [
										"{{url}}"
									],
									"path": [
										"achievements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get achievement by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/achievements/1",
									"host": [
										"{{url}}"
									],
									"path": [
										"achievements",
										"1"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get achievements for user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No achievements found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/user/{{user_id}}/achievements",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"{{user_id}}",
										"achievements"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get achievement by ID (No result)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No achievement found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/achievements/125",
									"host": [
										"{{url}}"
									],
									"path": [
										"achievements",
										"125"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Recommendation",
			"item": [
				{
					"name": "Valid",
					"item": [
						{
							"name": "Get recommendations by user ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/{{user_id}}/recommendations",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{user_id}}",
										"recommendations"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Invalid",
					"item": [
						{
							"name": "Get recommendations by user ID (No results)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"No recommendations found\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/404/recommendations",
									"host": [
										"{{url}}"
									],
									"path": [
										"404",
										"recommendations"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}